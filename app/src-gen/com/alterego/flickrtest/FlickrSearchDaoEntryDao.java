package com.alterego.flickrtest;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.alterego.flickrtest.FlickrSearchDaoEntry;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table FLICKR_SEARCH_DAO_ENTRY.
*/
public class FlickrSearchDaoEntryDao extends AbstractDao<FlickrSearchDaoEntry, Long> {

    public static final String TABLENAME = "FLICKR_SEARCH_DAO_ENTRY";

    /**
     * Properties of entity FlickrSearchDaoEntry.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Flickr_response_string = new Property(1, String.class, "flickr_response_string", false, "FLICKR_RESPONSE_STRING");
        public final static Property Flickr_search_string = new Property(2, String.class, "flickr_search_string", false, "FLICKR_SEARCH_STRING");
    };


    public FlickrSearchDaoEntryDao(DaoConfig config) {
        super(config);
    }
    
    public FlickrSearchDaoEntryDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'FLICKR_SEARCH_DAO_ENTRY' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'FLICKR_RESPONSE_STRING' TEXT," + // 1: flickr_response_string
                "'FLICKR_SEARCH_STRING' TEXT);"); // 2: flickr_search_string
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'FLICKR_SEARCH_DAO_ENTRY'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, FlickrSearchDaoEntry entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String flickr_response_string = entity.getFlickr_response_string();
        if (flickr_response_string != null) {
            stmt.bindString(2, flickr_response_string);
        }
 
        String flickr_search_string = entity.getFlickr_search_string();
        if (flickr_search_string != null) {
            stmt.bindString(3, flickr_search_string);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public FlickrSearchDaoEntry readEntity(Cursor cursor, int offset) {
        FlickrSearchDaoEntry entity = new FlickrSearchDaoEntry( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // flickr_response_string
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // flickr_search_string
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, FlickrSearchDaoEntry entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setFlickr_response_string(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setFlickr_search_string(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(FlickrSearchDaoEntry entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(FlickrSearchDaoEntry entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
